// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package updater

import (
	"context"
	"github.com/skibish/ddns/ipprovider"
	"sync"
)

// Ensure, that ProviderMock does implement ipprovider.Provider.
// If this is not the case, regenerate this file with moq.
var _ ipprovider.Provider = &ProviderMock{}

// ProviderMock is a mock implementation of ipprovider.Provider.
//
// 	func TestSomethingThatUsesProvider(t *testing.T) {
//
// 		// make and configure a mocked ipprovider.Provider
// 		mockedProvider := &ProviderMock{
// 			GetIPFunc: func(contextMoqParam context.Context) (string, error) {
// 				panic("mock out the GetIP method")
// 			},
// 		}
//
// 		// use mockedProvider in code that requires ipprovider.Provider
// 		// and then make assertions.
//
// 	}
type ProviderMock struct {
	// GetIPFunc mocks the GetIP method.
	GetIPFunc func(contextMoqParam context.Context) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetIP holds details about calls to the GetIP method.
		GetIP []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockGetIP sync.RWMutex
}

// GetIP calls GetIPFunc.
func (mock *ProviderMock) GetIP(contextMoqParam context.Context) (string, error) {
	if mock.GetIPFunc == nil {
		panic("ProviderMock.GetIPFunc: method is nil but Provider.GetIP was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetIP.Lock()
	mock.calls.GetIP = append(mock.calls.GetIP, callInfo)
	mock.lockGetIP.Unlock()
	return mock.GetIPFunc(contextMoqParam)
}

// GetIPCalls gets all the calls that were made to GetIP.
// Check the length with:
//     len(mockedProvider.GetIPCalls())
func (mock *ProviderMock) GetIPCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetIP.RLock()
	calls = mock.calls.GetIP
	mock.lockGetIP.RUnlock()
	return calls
}
