// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package updater

import (
	"context"
	"github.com/skibish/ddns/do"
	"sync"
)

// Ensure, that DomainsServiceMock does implement do.DomainsService.
// If this is not the case, regenerate this file with moq.
var _ do.DomainsService = &DomainsServiceMock{}

// DomainsServiceMock is a mock implementation of do.DomainsService.
//
// 	func TestSomethingThatUsesDomainsService(t *testing.T) {
//
// 		// make and configure a mocked do.DomainsService
// 		mockedDomainsService := &DomainsServiceMock{
// 			CreateFunc: func(contextMoqParam context.Context, s string, record do.Record) error {
// 				panic("mock out the Create method")
// 			},
// 			ListFunc: func(contextMoqParam context.Context, s string) ([]do.Record, error) {
// 				panic("mock out the List method")
// 			},
// 			UpdateFunc: func(contextMoqParam context.Context, s string, record do.Record) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedDomainsService in code that requires do.DomainsService
// 		// and then make assertions.
//
// 	}
type DomainsServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, s string, record do.Record) error

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, s string) ([]do.Record, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, s string, record do.Record) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Record is the record argument value.
			Record do.Record
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Record is the record argument value.
			Record do.Record
		}
	}
	lockCreate sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *DomainsServiceMock) Create(contextMoqParam context.Context, s string, record do.Record) error {
	if mock.CreateFunc == nil {
		panic("DomainsServiceMock.CreateFunc: method is nil but DomainsService.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Record          do.Record
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Record:          record,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, s, record)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedDomainsService.CreateCalls())
func (mock *DomainsServiceMock) CreateCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Record          do.Record
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Record          do.Record
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *DomainsServiceMock) List(contextMoqParam context.Context, s string) ([]do.Record, error) {
	if mock.ListFunc == nil {
		panic("DomainsServiceMock.ListFunc: method is nil but DomainsService.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, s)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedDomainsService.ListCalls())
func (mock *DomainsServiceMock) ListCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *DomainsServiceMock) Update(contextMoqParam context.Context, s string, record do.Record) error {
	if mock.UpdateFunc == nil {
		panic("DomainsServiceMock.UpdateFunc: method is nil but DomainsService.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Record          do.Record
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Record:          record,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, s, record)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedDomainsService.UpdateCalls())
func (mock *DomainsServiceMock) UpdateCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Record          do.Record
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Record          do.Record
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
